using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.NodeServices;
using PhantomJs.NetCore;

namespace CoreProjcet.Controllers
{
    public class HomeController : Controller
    {
        private IHostingEnvironment _hostingEnvironment;
        public HomeController(IHostingEnvironment hostingEnvironment)
        {
         
            _hostingEnvironment = hostingEnvironment;
           

        }

        [HttpGet]
        public async Task<IActionResult> Index([FromServices] INodeServices nodeServices)

        {
            string currentDirectory =  _hostingEnvironment.WebRootPath + $@"\images\";
           
            string phantomJsRootFolder = Path.Combine(Directory.GetCurrentDirectory(), "PhantomJsRoot");

            // the pdf generator needs to know the path to the folder with .exe files.
            PdfGenerator generator = new PdfGenerator(phantomJsRootFolder);

            HttpClient hc = new HttpClient();
            var htmlContent = await hc.GetStringAsync($"http://{Request.Host}/htmlpage.html");

            string pathOftheGeneratedPdf = generator.GeneratePdf(htmlContent, currentDirectory);

           // var result = await nodeServices.InvokeAsync<byte[]>("./pdf", htmlContent);

            //HttpContext.Response.ContentType = "application/pdf";
            //
            //HttpContext.Response.Headers.Add("x-filename", "report.pdf");
            //HttpContext.Response.Headers.Add("Access-Control-Expose-Headers", "x-filename");
            //HttpContext.Response.Body.Write(result, 0, result.Length);
            //return new ContentResult();
            // System.IO.File.WriteAllBytes(@"c:\foobar.pdf", result);
          //var  filename = _hostingEnvironment.WebRootPath + $@"\images\foobar.pdf";
          //  System.IO.File.WriteAllBytes(filename, result);
          //  FileContentResult file = File(result, "application/pdf", "report.pdf");
        
            return View();
        }


        public  IActionResult List()

        {
            string currentDirectory = Directory.GetCurrentDirectory();
            string phantomJsRootFolder = Path.Combine(currentDirectory, "PhantomJsRoot");

            // the pdf generator needs to know the path to the folder with .exe files.
            PdfGenerator generator = new PdfGenerator(phantomJsRootFolder);

            string htmlToConvert =
    @"
<!DOCTYPE html>
<html>
<head>

</head>
<body>
    <h1>Hello World!</h1>
    <p>This PDF has been generated by PhantomJs ;)</p>
</body>
</html>
";
            // Generate pdf from html and place in the current folder.
            string pathOftheGeneratedPdf = generator.GeneratePdf(htmlToConvert, currentDirectory);

            Console.WriteLine("Pdf generated at: " + pathOftheGeneratedPdf);

            return View();
        }


        public IActionResult Test() {
            return View();
        }
    }
}
